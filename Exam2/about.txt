“Certifico que el trabajo realizado en este examen es estrictamente personal y reconozco que no cumplir las reglas o COMETER ACTOS DESHONESTOS en los exámenes, puede resultar en la baja definitiva de la Universidad”

Sección 1. Desarrolle el programa solicitado 
Total de Reactivos: 2;   Valor por Reactivo: 30;   Valor Total: 60
1.- 
1.1.- Llene un arreglo de N celdas con números enteros (long int).
1.2.- Llene con ceros otro arreglo igual en tamaño y tipo.
1.3.- Pase como parámetros los dos arreglos a un método de una lista, el cual debe entregar en el segundo arreglo el contenido del primer arreglo, pero invertido.
1.4.- Imprima en pantalla los contenidos de los dos arreglos.
Notas:
1. Recuerde que un arreglo siempre entrega su dirección de memoria.
2. Evidentemente no se pide hacer un for que haga una copia cruzada de valores entre los dos arreglos.

2.- 
2.1.- Declare un vector de strings con STL de N celdas.
2.2.- Llene el vector con nombres de cantantes de su agrado.
2.3.- Pase como parámetro el arreglo a un método de una lista, el cual deberá tomar los valores del arreglo e insertarlos en la lista.
2.4.- Haga uso del método adecuado de la lista para mostrar el contenido de la lista para comprobar que contiene los valores del vector.
Notas:
1. Para usar los vectores de STL se requiere cargar #include <vector>
2. Los vectores de STL son templates, para declarar uno de strings se necesita escribir vector<string> Variable;


Sección 2. Desarrolle el programa solicitado.
Total de Reactivos: 1;   Valor por Reactivo: 40;   Valor Total: 40
3.-
3.1.- Implemente una lista doblemente ligada de strings (sin frecuencia).
3.2.- El constructor de la lista debe recibir un parámetro que indique el número de vecinos anteriores y posteriores. El valor del parámetro lo debe almacenar en un atributo de la clase. Su uso se explica más adelante.
3.3.1.- Si el parámetro es mayor a 7, se deberá tomar 7.
3.4.- Implemente el método searchNShow.
3.4.1.- Recibirá como parámetro un string.
3.4.2.- Deberá buscar el string en la lista.
3.4.3.- Si la encuentra, con el atributo del número de vecinos, deberá mostrar (cout) tantos valores previos como el valor del atributo de vecinos, luego el valor encontrado, con un asterisco (*) antes y después para distinguirlo, y tantos valores siguientes como el valor del atributo de vecinos.
Nota: Si el número de vecinos es 2, la salida tendría la forma:
       AAAA, BBB, *CC*, DDDD, EE.


Sección Opcional. Desarrolle el programa solicitado.
Total de Reactivos: 1;   Valor por Reactivo: 20;   Valor Total: 20

4.- Dada la lista del problema anterior, implemente el método searchNWrite, que realice lo mismo descrito para searchNShow del ejercicio 3, pero que mande la salida a un archivo de texto.

